pipeline {
    
    agent {
        label 'WORKER-NODE'
    }
    
    stages {
        stage('checkout') {
            steps {
                echo 'git clone'
                git branch: 'main', url: 'https://github.com/saicharan-clan/django-notes-app.git'
            }
        }
        
        stage('source code scanning'){
            steps{
                withCredentials([string(credentialsId: 'SONAR_AUTH_TOKEN', variable: 'AUTHENTICATION_TOKEN')]) {
                    echo "source code analysis"
                    sh '''
                        /home/ubuntu/myenv/bin/pysonar-scanner \
                        -Dsonar.projectKey=myproject \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://http://18.212.178.21:9000 \
                        -Dsonar.login=$AUTHENTICATION_TOKEN
                    '''
                }
            }
        }
        
        stage('build'){
            steps{
                echo "building docker image"
                sh 'docker build -t django:v21 .'
            }
        }
        
        stage('scanning container image'){
            steps{
                echo "scanning docker image"
                sh 'trivy image --format table django:v21'
            }
        }
        
        stage('dockerhub_login'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CRED', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    echo "dockerhublogin"
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                }
                
            }
        }
        
        stage('docker push'){
            steps{
                echo "docker push"
                sh "docker tag django:v21 saicharan09/django:v21"
                sh "docker push saicharan09/django:v21"
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh "docker-compose down && docker-compose up -d --build"
            }
        }
        
    }
}
def slackNotification(stageName) {
            slackSend channel: 'jenkins', 
              message: "slack integration was successful", 
              tokenCredentialId: 'SLACK_SECRET',
              username: 'bot'
    
}
